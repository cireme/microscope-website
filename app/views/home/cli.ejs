<div class="page-header animated slideInRight">
  <h1 class="text-info">Documentation <small>how to use microscope.js</small></h1>
</div>

<div class="row">
	<div class="col-md-3">
		<ul class="list-group">
			<a class="list-group-item" href="/documentation">Getting started</a>
			<a class="list-group-item" href="/documentation/architecture">Project architecture</a>
			<a class="list-group-item active" href="/documentation/cli">CLI</a>
			<a class="list-group-item" href="/documentation/models">Models</a>
			<a class="list-group-item" href="/documentation/controllers">Controllers</a>
			<a class="list-group-item" href="/documentation/api">Api</a>
			<a class="list-group-item" href="/documentation/dal">Data Access Layer</a>
			<a class="list-group-item" href="/documentation/views">Views</a>
			<a class="list-group-item" href="/documentation/database">Database</a>
			<a class="list-group-item" href="/documentation/middleware">Middleware</a>
		</ul>
	</div>
	<div class="col-md-9 animated bounceInUp">
		<h2 class="text-primary">CLI</h2>
			<h3 class="text-success">Command Line Interface</h3>
				<p>
					microscope provided a command line interface to quickly build web application. You can run server, generate some models or controllers and scaffold REST API, CRUD controller or Data Access Layer.
				</p>
				<p>Here is the CLI commands (arguments in "[]"): </p>

				<h4 class="text-primary">display help</h4>
				<pre>microscope help</pre>
				<p>Display help for microscope commands</p>
				<br>

				<h4 class="text-primary">Displaying inquirer tool</h4>
				<pre>microscope tool</pre>
				<p>Display microscope inquirer tool describe bellow.</p>
				<br>

				<h4 class="text-primary">Create new project</h4>
				<pre>microscope new [projectname]</pre>
				<p>This command create a new microscope project in your current shell location. Argument is the name of your project.</p>
				<br>

				<h4 class="text-primary">Run application server</h4>
				<p class="text-danger">You have to run this command at the project root</p>
				<pre>microscope server</pre>
				<p>this command run the application server.</p>
				<br>

				<h4 class="text-primary">generate model file</h4>
				<p class="text-danger">You have to run this command at the project root</p>
				<pre>microscope generate model [modelname] [property1:type] [property2:type] [property3:type] ...</pre>
				<p>This command generate a model file with the name in first argument and properties in others arguments. Check <b>./app/models</b> folder !</p>
				<p>Here is the available property type :</p>
				<ul>
					<li>string</li>
					<li>text</li>
					<li>boolean</li>
					<li>date</li>
					<li>integer</li>
					<li>float</li>
				</ul>
				<br>

				<h4 class="text-primary">generate controller file</h4>
				<p class="text-danger">You have to run this command at the project root</p>
				<pre>microscope generate controller [controllername] [action1] [action2] ...</pre>
				<p>this command generate a controller file and views file according to actions pass in arguments. It also create a stylus file in <b>./app/assets/styles/ folder</b></p>
				<br>

				<h4 class="text-primary">scaffold crud controller</h4>
				<p class="text-danger">You have to run this command at the project root</p>
				<pre>microscope scaffold controller [modelname] [property1:type] [property2:type] ...</pre>
				<p class="text-success">Add option : <b>--mobile</b> or <b>-m</b> for adding mobile views.</p>
				<p>this command generate a <b>crud controller</b> with <b>crud views</b> and a <b>model</b> files according to the model passed in arguments. It also create a <b>stylus</b> file in <b>./app/assets/styles/</b> folder and a <b>data access layer</b> class.</p><p>This command is very useful for prototyping an application.</p>
				<br>

				<h4 class="text-primary">scaffold web api</h4>
				<p class="text-danger">You have to run this command at the project root</p>
				<pre>microscope scaffold api [modelname] [property1:type] [property2:type] ...</pre>
				<p>this command generate a web api , a model and a data access layer class according to the model passing in arguments.</p>
				<br>

				<h4 class="text-primary">scaffold data access layer</h4>
				<p class="text-danger">You have to run this command at the project root</p>
				<pre>microscope scaffold dal [modelname] [property1:type] [property2:type] ...</pre>
				<p>this command generate a data access layer class with crud methods and a model file according to the model passing in arguments.</p>
				<br>

				<h4 class="text-primary">database synchronization</h4>
				<p class="text-danger">You have to run this command at the project root</p>
				<pre>microscope db sync</pre>
				<p>this command generate SQL request according to your dbContext entities to synchronize database tables with your models. You have to edit database.json configuration file before executing this command.</p>
				<br>

				<h4 class="text-primary">database drop</h4>
				<p class="text-danger">You have to run this command at the project root</p>
				<pre>microscope db drop</pre>
				<p>this command generate SQL request according to your dbContext entities to drop database tables. You have to edit database.json configuration file before executing this command.</p>
				<br>

				<h4 class="text-primary">run fixtures</h4>
				<p class="text-danger">You have to run this command at the project root</p>
				<pre>microscope db fixture</pre>
				<p>this command run functions defined in file dbFixtures.js. Use it to load seeds data.</p>
				<br>

			<h3 class="text-success">Command Line Tool</h3>
				<h4 class="text-primary">Display microscope inquirer tool</h4>
				<p class="text-danger">You have to run this command at the project root</p>
				<pre>microscope tool</pre>
				<p>this command display microscope inquirer tool. It is a shell application with a list of commands that you can run. Select one option and answer to the questions (*)! Pretty easy !</p>
				<p>* Syntaxes for describing models and controllers are the same as in the command line interface.</p>
				<br>

			<h3 class="text-success">Grunt tasks</h3>
				<h4 class="text-primary">build assets for development</h4>
				<p class="text-danger">You have to run this command at the project root</p>
				<pre>grunt build</pre>
				<p>This command build your public folder from your assets, bower components and stylus styles. Stylus files are compiled in application.css</p>
				<p>
					Update ./grunt_tasks/copy.js grunt task for copying dependencies in your public folder like bootstrap.js, bootstrap.css or jquery.js. Put JavaScript external librairies in ./public/vendors folder.
				</p>
				<br>

				<h4 class="text-primary">build assets for release</h4>
				<p class="text-danger">You have to run this command at the project root</p>
				<pre>grunt build:release</pre>
				<p>This command build your public folder from your assets, bower components and stylus styles in release mode.</p>
				<p>
					In release mode, take only minified files. Stylus task generate minify css in release mode.
				</p>
				<br>

			<p>
				<a class="btn btn-warning" href="/documentation/architecture">Project architecture</a>
				<a class="btn btn-primary" href="/documentation/models">Models</a>
			</p>
	</div>
</div>